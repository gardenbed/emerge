package {{.Package}}

import (
	"bytes"
	"fmt"
)

// endmarker is a special symbol that is used to indicate the end of a string.
// This special symbol assumed not to be a symbol of any grammar and
// it is taken from a Private Use Area (PUA) in Unicode.
//
// The endmarker is not a formal part of the grammar itself but is introduced during parsing
// to simplify the handling of end-of-input scenarios.
const endmarker = Terminal("\uEEEE")

// Terminal represents a terminal symbol.
type Terminal string

// String returns a string representation of a terminal symbol.
func (t Terminal) String() string {
	if t == endmarker {
		return "$"
	}

	return fmt.Sprintf("%q", t.Name())
}

// Name returns the name of terminal symbol.
func (t Terminal) Name() string {
	if t == endmarker {
		return "$"
	}

	return string(t)
}

// NonTerminal represents a non-terminal symbol.
type NonTerminal string

// String returns a string representation of a non-terminal symbol.
func (n NonTerminal) String() string {
	return n.Name()
}

// Name returns the name of non-terminal symbol.
func (n NonTerminal) Name() string {
	return string(n)
}

// Token represents a unit of the input language.
//
// A token consists of a terminal symbol, along with additional information such as
// the lexeme (the actual value of the token in the input) and its position in the input stream.
type Token struct {
	Terminal
	Lexeme string
	Pos    Position
}

// String implements the fmt.Stringer interface.
//
// It returns a formatted string representation of the token.
func (t Token) String() string {
	return fmt.Sprintf("%s <%s, %s>", t.Terminal, t.Lexeme, t.Pos)
}

// Equal determines whether or not two tokens are the same.
func (t Token) Equal(rhs Token) bool {
	return t.Terminal == rhs.Terminal &&
		t.Lexeme == rhs.Lexeme &&
		t.Pos.Equal(rhs.Pos)
}

// Position represents a specific location in an input source.
type Position struct {
	Filename string // The name of the input source file (optional).
	Offset   int    // The byte offset from the beginning of the file.
	Line     int    // The line number (1-based).
	Column   int    // The column number on the line (1-based).
}

// String implements the fmt.Stringer interface.
//
// It returns a formatted string representation of the position.
func (p Position) String() string {
	var b bytes.Buffer

	if len(p.Filename) > 0 {
		fmt.Fprintf(&b, "%s:", p.Filename)
	}

	if p.Line > 0 && p.Column > 0 {
		fmt.Fprintf(&b, "%d:%d", p.Line, p.Column)
	} else {
		fmt.Fprintf(&b, "%d", p.Offset)
	}

	return b.String()
}

// Equal determines whether or not two positions are the same.
func (p Position) Equal(rhs Position) bool {
	return p.Filename == rhs.Filename &&
		p.Offset == rhs.Offset &&
		p.Line == rhs.Line &&
		p.Column == rhs.Column
}

// IsZero checks if a position is a zero (empty) value.
func (p Position) IsZero() bool {
	var zero Position
	return p == zero
}
